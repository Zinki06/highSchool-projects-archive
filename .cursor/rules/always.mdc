---
alwaysApply: false
---
# 프로젝트 개발 가이드라인

## 기본 원칙

### 한국어도 대답할 것
### REF/ 폴더는 참고용임. 작업할 폴더 아님

### Simple is the Best
- 복잡한 구조보다 단순하고 직관적인 코드 작성
- 과도한 추상화와 모듈화 지양
- 필요한 기능만 구현하고 불필요한 기능 제거

## 파일 구조

### 진입점 파일 규칙
- **Python 프로젝트**: `main.py` 필수
- **웹 프로젝트**: `index.html` 필수
- 단일 파일로 핵심 기능 완성 가능하도록 구성

### 파일 구성
- 최소한의 파일로 프로젝트 완성
- 별도 모듈 분리는 정말 필요한 경우만
- 설정 파일, 유틸리티 파일 최소화

## 코딩 스타일

### 구조화
- 클래스보다 함수 중심 설계
- 과도한 객체지향 설계 지양
- 간단한 기능은 함수로 충분

### 모듈화 수준
- **적절한 모듈화**: 기능별 함수 분리
- **과도한 모듈화**: 클래스, 상속, 복잡한 디자인 패턴
- 읽기 쉽고 수정하기 편한 수준 유지

### 코드 품질
- 타입 힌트는 필요한 경우만 사용
- 로깅 시스템은 간단하게 (print 문도 충분)
- 에러 처리는 핵심적인 부분만

## 언어 및 문체

### 주석과 문서화
- AI 스타일 지양: "~했습니다", "~되었습니다" 
- 자연스러운 한국어: "~함", "~됨"
- 간결하고 필요한 설명만

### 변수명과 함수명
- 한국어 주석, 영어 변수명
- 직관적이고 짧은 이름 선호
- 과도한 설명적 이름 지양

## 기능 구현

### 알고리즘 선택
- 검증된 알고리즘 우선 사용
- 너무 고급 기법보다 기본기 중심
- 성능과 가독성의 균형

### 사용자 인터페이스
- 명령행 인터페이스는 간단하게
- 필수 옵션만 제공
- 복잡한 설정 파일보다 인자 전달

## 문서화

### README 작성 스타일

**기본 원칙:**
- 프로젝트 설명 & 알고리즘 설명(공부용으로 프로젝트 한 거기 때문)
- 과도한 마케팅 문구 지양
- 연구 논문 스타일로 체계적 작성

**구조 가이드라인:**

1. **연구 배경과 목적**
   - 명확한 연구 질문으로 시작
   - "~한가?" 형태의 문제 제기
   - 프로젝트 목표와 예상 난이도 명시

2. **최종 성과 요약**
   - 핵심 결과를 구체적 수치로 제시
   - 각 실험별 주요 성능 지표
   - 정량적 분석 결과

3. **실험별 체계적 분석**
   - 이론적 배경 → 실험 설계 → 결과 분석 순서
   - 수학적 공식과 알고리즘 설명
   - 결과 이미지(시각데이터는 직접 실행해서 저장하기. 렌더링할때 한국어 폰트는 없으므로 영어로 하기)는 상대경로로 참조
   - 성능 지표를 표 형태로 정리

4. **종합 분석과 고찰**
   - 핵심 발견사항과 관찰 내용
   - 이론과 실제 구현 간 차이점
   - 한계점과 개선 방향 제시

5. **실험 환경과 재현성**
   - 소프트웨어/하드웨어 환경 명시
   - 실행 방법과 결과 재현 가이드
   - 의존성과 설치 방법

**문체 특징:**
- "~함", "~됨" 자연스러운 종결어미
- "관찰함", "확인함", "발견함" 등 연구 표현
- 구체적 수치와 정량적 분석 중심
- AI 특유의 과도한 설명 지양

**결과 이미지 관리:**
- `results/` 폴더에 저장
- 상대경로로 참조: `![제목](results/filename.png)`
- `--save-results` 옵션으로 자동 생성

### 주석 작성
- 코드의 의도 설명
- 복잡한 로직에 대한 간단한 설명
- 함수 docstring은 한 줄로

## 테스트와 검증

### 간단한 테스트
- 기본 동작 확인
- 에러 케이스 처리
- 복잡한 테스트 프레임워크 지양

## 예시 구조

```
project/
├── main.py          # 메인 진입점
├── README.md        # 간단한 사용법
└── sample/          # 샘플 데이터 (필요시)
```

## 체크리스트

### 코드 품질
- [ ] main.py 또는 index.html 존재
- [ ] 단순한 함수 구조
- [ ] 과도한 클래스 사용 안함
- [ ] 필수 기능만 구현

### 문서 품질  
- [ ] 자연스러운 한국어 사용 ("~함", "~됨")
- [ ] 연구 논문 스타일 README
- [ ] AI 티 나지 않는 설명
- [ ] 결과 이미지 상대경로 참조
- [ ] 정량적 성능 지표 포함

### 사용성
- [ ] 직관적인 사용법
- [ ] 최소한의 의존성
- [ ] 빠른 실행 가능

# GitHub 포트폴리오 정리 가이드라인

## 개요

특정 기간(예: 고등학생 시절, 대학 초기 등)의 프로젝트들을 체계적으로 정리하여 GitHub에 업로드하기 위한 단계별 가이드라인. 프로젝트 분석부터 최종 검증까지 전체 과정을 포함함.

## 1단계: 프로젝트 분석 및 분류

### 초기 분석
- **전체 프로젝트 목록 파악**: 모든 폴더와 파일 구조 확인
- **중복 프로젝트 식별**: 같은 내용의 다른 버전 찾기
- **완성도 평가**: 실행 가능하고 의미 있는 프로젝트 선별
- **기술 스택 분석**: 사용된 언어, 프레임워크, 라이브러리 정리

### 분류 체계 설계
```
포트폴리오명/
├── ai-ml-projects/        # AI/머신러닝 관련
├── math-statistics/       # 수학/통계 연구
├── web-simulations/       # 웹 기반 시뮬레이션
├── data-analysis/         # 데이터 분석
├── games-interactive/     # 게임/인터랙티브
├── references/            # 참고자료 (papers, docs)
└── CLAUDE.md             # 개발 가이드라인
```

### 카테고리 선정 기준
- **주제별 그룹화**: 비슷한 기술이나 목적을 가진 프로젝트 묶기
- **기술 스택 고려**: 같은 언어/프레임워크 사용 프로젝트
- **학습 단계**: 초급 → 중급 → 고급 순서 반영
- **실용성**: 교육적/실험적 vs 실용적 용도 구분

## 2단계: 프로젝트 이름 표준화

### 명명 원칙
- **기능 중심**: 프로젝트가 하는 일을 명확히 표현
- **기술 특징**: 핵심 기술이나 알고리즘 포함
- **간결성**: 길지 않고 기억하기 쉬운 이름
- **일관성**: 비슷한 프로젝트는 비슷한 패턴 사용

### 예시 변환
```
기존 → 개선
first-ai-class → korean-blanks-generator
SVM_simulator → svm-simulator
auto_drive → qlearning-car-sim
binary number → binary-calculator
standard → digital-abacus
recommend-color → emotion-color-ai
school_place → school-vision-classifier
```

### 네이밍 패턴
- **알고리즘명-용도**: `genetic-game-ai`, `qlearning-car-sim`
- **기능-도구명**: `korean-blanks-generator`, `binary-calculator`
- **도메인-기술**: `emotion-color-ai`, `school-vision-classifier`
- **개념-시뮬레이터**: `svm-simulator`, `stat-theory-sim`

## 3단계: 코드 리팩토링

### 구조 개선
- **클래스 → 함수 변환**: CLAUDE.md 원칙에 따른 단순화
- **파일 통합**: 불필요하게 분리된 모듈 합치기
- **진입점 표준화**: main.py 또는 index.html 확실히 지정
- **의존성 최소화**: 꼭 필요한 라이브러리만 유지

### 호환성 개선
```javascript
// 기존 (문제있는 코드)
function saveImage() {  // p5.js와 충돌
    // ...
}

// 개선
function saveVisualization() {  // 명확한 이름
    let timestamp = new Date().toISOString().slice(0, 19).replace(/:/g, '-');
    saveCanvas(`result_${timestamp}`, 'png');
}
```

### 함수형 변환 예시
```javascript
// 기존 클래스 구조
class BinaryAbacus {
    constructor(containerId, bits) { ... }
    toggleBead(rod) { ... }
}

// 함수형 구조로 변환
const abacusStates = new Map();

export function createBinaryAbacus(containerId, bits) {
    const container = document.getElementById(containerId);
    abacusStates.set(containerId, { container, bits });
}

export function toggleBead(abacusId, rod) {
    const state = abacusStates.get(abacusId);
    // ...
}
```

## 4단계: 문서 포멀화

### README 작성 표준
- **연구 논문 스타일**: 배경, 방법, 결과, 결론 구조
- **정량적 지표**: 구체적 수치와 성능 데이터 포함
- **재현성**: 실행 방법과 환경 설정 명시
- **시각 자료**: results/ 폴더에 그래프/차트 저장

### AI 표현 제거 체크리스트
```
제거 대상:
❌ "교육적 의의", "향후 계획", "기대 효과"
❌ "~했습니다", "~되었습니다", "~할 수 있습니다"
❌ 모든 이모지 (🎯, 📊, 🌐, 🔍 등)
❌ "혁신적", "획기적", "놀라운" 등 과장 표현

사용 권장:
✅ "~함", "~됨", "~임"
✅ "관찰함", "확인함", "구현함", "분석함"
✅ 구체적 수치와 측정 결과
✅ 기술적 한계와 개선 방향
```

### 카테고리별 README 구조
```markdown
# 카테고리명 프로젝트 모음

> 간단한 설명과 목적

## 프로젝트 목표
- 구체적 목표 1
- 구체적 목표 2

## 프로젝트 목록

### [프로젝트명](폴더명/)
- **기간**: 개발 시기
- **내용**: 핵심 기능 설명
- **성과**: 정량적 결과

## 사용 기술
- 언어: Python, JavaScript 등
- 프레임워크: PyTorch, p5.js 등
- 도구: 특별히 사용한 도구들

각 프로젝트 폴더의 README.md에서 상세 내용 확인 가능함.
```

## 5단계: 품질 검증

### 자동 검증 항목
```bash
# 필수 파일 존재 확인
find . -name "main.py" -o -name "index.html" | wc -l

# 이모지 잔존 확인  
grep -r "🎯\|📊\|🌐\|🔍\|📈\|💡" . --include="*.md"

# AI 표현 확인
grep -r "했습니다\|되었습니다\|교육적 의의\|향후 계획" . --include="*.md"

# 상대경로 이미지 확인
grep -r "!\[.*\]([^h].*\.png)" . --include="*.md"
```

### 수동 검증 체크리스트

#### 프로젝트 구조
- [ ] 카테고리별 폴더 구조 일관성
- [ ] 프로젝트명 명명 규칙 준수
- [ ] 진입점 파일 (main.py/index.html) 존재
- [ ] 불필요한 파일/폴더 제거

#### 코드 품질
- [ ] 클래스 → 함수 변환 완료
- [ ] 함수명/변수명 일관성
- [ ] 의존성 최소화 확인
- [ ] 실행 가능성 테스트

#### 문서 품질
- [ ] 모든 README 연구 논문 스타일
- [ ] 이모지 완전 제거
- [ ] AI 표현 완전 제거  
- [ ] 정량적 지표 포함
- [ ] 실행 방법 명시

#### 포트폴리오 전체
- [ ] 메인 README 완성도
- [ ] 카테고리 간 일관성
- [ ] 프로젝트 연결성 확인
- [ ] 전체 스토리텔링 흐름

## 6단계: 최종 정리

### Git 관리
```bash
# .gitignore 설정
echo "*.pyc" >> .gitignore
echo "__pycache__/" >> .gitignore
echo ".DS_Store" >> .gitignore
echo "node_modules/" >> .gitignore

# 커밋 메시지 표준
git add .
git commit -m "Organize portfolio: restructure projects by category

- Categorize 13 projects into 4 main groups
- Rename projects with descriptive names  
- Convert class-based code to function-based
- Remove AI-generated expressions from documentation
- Add quantitative performance metrics

🤖 Generated with Claude Code"
```

### 검증 스크립트 예시
```python
# portfolio_validator.py
import os
import re
from pathlib import Path

def validate_portfolio(root_path):
    """포트폴리오 품질 검증"""
    issues = []
    
    # 1. README 파일 검증
    for readme in Path(root_path).rglob("README.md"):
        content = readme.read_text(encoding='utf-8')
        
        # 이모지 검사
        emojis = re.findall(r'[🎯📊🌐🔍📈💡🛠️📄]', content)
        if emojis:
            issues.append(f"Emojis found in {readme}: {emojis}")
        
        # AI 표현 검사
        ai_phrases = re.findall(r'(했습니다|되었습니다|교육적 의의|향후 계획)', content)
        if ai_phrases:
            issues.append(f"AI phrases in {readme}: {ai_phrases}")
    
    # 2. 진입점 파일 검증
    for project_dir in Path(root_path).iterdir():
        if project_dir.is_dir() and not project_dir.name.startswith('.'):
            has_entry = any([
                (project_dir / "main.py").exists(),
                (project_dir / "index.html").exists()
            ])
            if not has_entry:
                issues.append(f"No entry point in {project_dir}")
    
    return issues

if __name__ == "__main__":
    issues = validate_portfolio(".")
    if issues:
        print("Issues found:")
        for issue in issues:
            print(f"  - {issue}")
    else:
        print("Portfolio validation passed!")
```

## 적용 워크플로우

### 1. 프로젝트 시작
```bash
# 1. 전체 분석
find . -type d -maxdepth 1 | sort

# 2. 중복 탐지
find . -name "*.py" -o -name "*.js" | xargs wc -l | sort -n

# 3. 기술 스택 파악
find . -name "requirements.txt" -o -name "package.json" | xargs cat
```

### 2. 카테고리 설계
- 프로젝트 성격에 따른 3-5개 카테고리 선정
- 각 카테고리별 2-6개 프로젝트 배치
- references/ 폴더로 참고자료 분리

### 3. 순차 정리
1. **프로젝트명 변경**: 기능 중심의 명확한 이름
2. **코드 리팩토링**: 클래스 → 함수, 파일 통합
3. **README 작성**: 연구 논문 스타일, 정량적 지표
4. **문서 포멀화**: AI 표현 제거, 이모지 제거
5. **검증**: 자동/수동 품질 확인

### 4. 최종 확인
- 모든 프로젝트 실행 테스트
- 문서 일관성 검토
- 포트폴리오 전체 스토리 확인

이 가이드라인을 따르면 체계적이고 전문적인 GitHub 포트폴리오를 구성할 수 있음.